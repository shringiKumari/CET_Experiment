using UnityEngine;
using UnityEditor;
using System.IO;
using System.Collections.Generic;
using System.Text.RegularExpressions;

[CustomEditor(typeof(Analytics))]
public class AnalyticsInspector : Editor
{

    #region GUI Main
    public override void OnInspectorGUI()
    {

        

        ShowLogo(); // Show the test tube logo

        /*
        if (Application.isPlaying)
        {
            return;
        }
        */

        if (ResetAll()) { return; } // Give users the opportunity to reset everything

        if (NeedToSelectLoggingLocation()) { return; } // Give the users the option to log locally, or remotely.

        if (LoggingLocally()) { return; } // If users want to only log locally, curtail the UI

        if (ServerNotSetup()) { return; } // If the users want to log remotely, display a wizard for setting up the UI

        /*
         * If the server has been set up, show a list of games that the user can log data for, and give them the option to 
         * specify a number of different experimental conditions.
         */

        ShowGames();

        ProvideExperimentalOptions();




    }

    #endregion

    #region Individual GUI Elements


    public bool PHPGenerated()
    {

        /*
         * This function displays a GUI which lets you generate PHP if
         * PHP has not yet been generated, or returns 'true' and does not
         * create a GUI if PHP has already been generated by the user.
         */

        Analytics analytics = (Analytics)target;

        if (analytics.PHPGenerated) { return true; }

        print("This screen should help you set up data logging.");
        print("You will need a server capable of hosting PHP files.");
        print("You will need a fresh MySQL database in place already.");
        print("If you're confused about doing this, the attached documentation");
        print("will talk you through setting this up with AWS in ~10 minutes");

        EditorGUILayout.Separator();

        EditorGUILayout.BeginHorizontal();
        analytics.DBHostname = textbox("Hostname", analytics.DBHostname);
        analytics.DBPort = textbox("Port", analytics.DBPort);
        EditorGUILayout.EndHorizontal();

        analytics.DBName = textbox("Database name", analytics.DBName);

        EditorGUILayout.BeginHorizontal();
        analytics.DBUserName = textbox("Username", analytics.DBUserName);
        analytics.DBPassword = textbox("Password", analytics.DBPassword, true);
        EditorGUILayout.EndHorizontal();

        if (GUILayout.Button("Generate PHP files"))
        {
            Undo.RecordObject(analytics, "Update analytics object");
            GeneratePHP();
            analytics.PHPGenerated = true;
            EditorUtility.SetDirty(analytics);
        }

        return false;

    }

    public bool ResetAll()

    {

        /*
         * Adds a reset button to the GUI. If the button is pressed, rests the analytics object fully.
         */

        if (GUILayout.Button("Reset All", GUILayout.ExpandWidth(false)))
        {
            Analytics analytics = (Analytics)target;


            analytics.LoggingLocationSet = false;
            analytics.WizardCompleted = false;
            analytics.PHPGenerated = false;
            analytics.DBPassword = "";

            analytics.BaseDomainURL = "http://example.com/PHP/";


            ResetListOfGames();

            return true;

        }
        EditorGUILayout.Separator();

        return false;

    }

    public bool LoggingLocally()
    {

        /*
         * If the user has elected to log data locally, display a small GUI which lets them know that nothing further is required from them.
         */

        Analytics analytics = (Analytics)target;

        if (analytics.LogToDisk)
        {
            GUIStyle green = new GUIStyle(GUI.skin.label);
            green.normal.textColor = new Color(0f, 0.5f, 0f);

            GUILayout.Label("Logging data locally", green);

            return true;
        }
        return false;
    }



    private string textbox(string label, string text, bool password = false)
    {

        /*
         * Creates an textbox for inputting text to the GUI. if password = true, replaces 
         * user input with *s for security.
         */

        EditorGUILayout.BeginHorizontal();
        float f = EditorGUIUtility.labelWidth;
        EditorGUIUtility.labelWidth = (label.ToCharArray().Length) * 10f;
        EditorGUILayout.PrefixLabel(label);
        if (!password)
        {
            text = EditorGUILayout.TextField(text, GUILayout.ExpandWidth(false));
        }
        else
        {
            text = EditorGUILayout.PasswordField(text, GUILayout.ExpandWidth(false));
        }

        EditorGUILayout.EndHorizontal();
        return text;

    }

    public bool DBSetup()
    {

        /*
         * Adds a prompt to locate the PHP folder to the GUI. Returns true if the PHP folder has already been specified.
         */

        Analytics analytics = (Analytics)target;
        if (analytics.WizardCompleted) { return true; }

        print("There is now a folder called 'PHP' in this project.");
        print("Upload the contents of this folder to your server.");
        print("When you have done this, indicate below the location of this folder.");

        analytics.BaseDomainURL = textbox("Location of PHP folder", analytics.BaseDomainURL);

        if (GUILayout.Button("Finish setup"))
        {
            Undo.RecordObject(analytics, "Update analytics object");

            EditorUtility.SetDirty(analytics);

            analytics.WizardCompleted = true;

        }

        return false;

    }

    private bool NeedToSelectLoggingLocation()
    {
        /*
         * Display a GUI which queries whether the user wishes to log data locally or remotely. Return false if this decision has been made.
         */

        Analytics analytics = (Analytics)target;

        if (analytics.LoggingLocationSet) { return false; }

        GUILayout.BeginHorizontal();
        GUILayout.Label("Record data locally?", GUILayout.ExpandWidth(false));

        if (GUILayout.Button("Yes", GUILayout.ExpandWidth(false)))
        {
            Undo.RecordObject(analytics, "Update analytics object");

            analytics.LoggingLocationSet = true;
            analytics.LogToDisk = true;
            EditorUtility.SetDirty(analytics);
        }
        if (GUILayout.Button("No", GUILayout.ExpandWidth(false)))
        {
            Undo.RecordObject(analytics, "Update analytics object");

            analytics.LoggingLocationSet = true;
            analytics.LogToDisk = false;
            EditorUtility.SetDirty(analytics);
        }
        GUILayout.EndHorizontal();




        return true;
    }


    private void ProvideExperimentalOptions()
    {

        Undo.RecordObject(target as Analytics, "Update analytics object");


        GUIStyle blue = new GUIStyle(GUI.skin.label);
        blue.normal.textColor = new Color(0.5f, 0.5f, 1f);


        EditorGUILayout.LabelField("");

        Analytics analytics = (Analytics)target;

        EditorGUILayout.LabelField("Is this an experiment?", blue);
        EditorGUILayout.LabelField("If so, indicate the number of conditions:", blue);

        EditorGUILayout.BeginHorizontal();
        EditorGUILayout.LabelField("Number of Conditions:");

        int i = analytics.NumberOfConditions;

        analytics.NumberOfConditions = EditorGUILayout.IntField(analytics.NumberOfConditions);
        if (analytics.NumberOfConditions < 1)
        {
            analytics.NumberOfConditions = 1;
        }

        EditorPrefs.SetInt("Conditions", analytics.NumberOfConditions);


        EditorGUILayout.EndHorizontal();

        if (i != analytics.NumberOfConditions || GUI.changed) { EditorUtility.SetDirty(analytics); }

    }

    private void NewGameCreationGUI()
    {

        /*
         * Creates a user interface for specifying the name of a new game.
         */

        Analytics analytics = (Analytics)target;

        GUILayout.Label("");
        EditorGUILayout.LabelField("Create New Game");
        analytics.NewGameName = EditorGUILayout.TextField("Game Name:", analytics.NewGameName);

        if (analytics.NewGameName.Length > 0)
        {
            if (analytics.GameNameID.ContainsKey(formatString(analytics.NewGameName)) == false)
            {
                bool clicked = GUILayout.Button("Add New Game", GUILayout.ExpandWidth(false));

                if (clicked)
                {
                    NewGame();
                }
            }
        }

    }

    private void ShowGames()
    {
        /*
         * Create a GUI which allows users to select a game from a list of games to log data for,
         * and also allows them the option to create a new game to log data for.
         */

        EditorGUILayout.LabelField("Which game is this?");

        Analytics analytics = (Analytics)target;


        /*
         * Grab a list of games - either locally, or from the server if a local list does not exist.
         */


        string[] Options = GetGames();


        /*
         * Allow the user to select one of these games.
         */

        Undo.RecordObject(analytics, "Update analytics object");


        analytics.SelectedGameOption = EditorGUILayout.Popup(analytics.SelectedGameOption, Options, GUILayout.ExpandWidth(false));

        /*
         * If the user has selected a pre-existing game, flag that as the game to log data for.
         */

        if (analytics.SelectedGameOption < Options.Length - 1)
        {

            GUIStyle green = new GUIStyle(GUI.skin.label);
            green.normal.textColor = new Color(0f, 0.5f, 0f);

            int i;
            analytics.GameNameID.TryGetValue(Options[analytics.SelectedGameOption], out i);

            if (i != analytics.gameID)
            {
                analytics.gameID = i;
                EditorUtility.SetDirty(analytics);
            }

            EditorGUILayout.LabelField("Recording data for " + Options[analytics.SelectedGameOption] + " (gID: " + analytics.gameID + ")", green);

            return;

        }

        /*
         * If the user selects the option of 'New Game' from the popup, present them with a GUI for creating a new game.
         */

        NewGameCreationGUI();


    }


    private void ShowLogo()
    {

        /*
         * Grab 'LogoLong.png' from resources, and display it as a banner
         */

        Texture image = (Texture)Resources.Load("LogoLong");

        int width = Screen.width - 36;
        int height = (int)((float)((float)width / (float)image.width) * image.height);
        GUILayout.Label(image, GUILayout.MaxWidth(width), GUILayout.MaxHeight(height));
    }


    public bool ServerNotSetup()
    {

        Analytics analytics = (Analytics)target;

        if (!PHPGenerated()) { return true; }

        if (!DBSetup()) { return true; }

        return false;

    }

    #endregion

    #region Enabling and Disabling the Analytics object

    public void OnEnable()
    {


        /*
         * Preserve the number of experimental conditions that are used in this game between scenes
         */



        EditorPrefs.SetInt("Conditions", ((Analytics)target).NumberOfConditions);

        /*
         * Reset the list of available games when the analytics object is enabled, so that it grabs
         * a fresh list from the server.
         */

        ResetListOfGames();





    }

    public void OnDisable()
    {

        ResetListOfGames();
    }

    #endregion

    #region Resetting the Analytics object

    private void ResetListOfGames()
    {


        /*
         * Reset which games is selected - this function prompts a full refresh of the list of games which can be selected
         */

        if (target != null)
        {

            Analytics analytics = (Analytics)target;

            analytics.GameNameID = new Dictionary<string, int>();
            analytics.GameNames = new string[0];
            analytics.NewGameName = "";

            EditorUtility.SetDirty(analytics);

        }

    }

    #endregion

    #region Miscellenous Helper Functions

    private string formatString(string s)
    {
        s = s.Replace("¬", "NotChar");
        s = s.Replace("|", "PipeChar");
        return s;
    }

    private void print(string s)
    {
        EditorGUILayout.LabelField(s);
    }

    public void Prepend(string prefix, string templatePath, string writePath)
    {

        TextAsset template = Resources.Load(templatePath) as TextAsset;
        File.WriteAllText(writePath, prefix + template.text);

    }

    public void PrependLogin(string templatePath, string writePath)
    {

        Analytics a = (Analytics)target;

        List<string> php = new List<string>();

        php.Add("<?php\n");



        php.Add(phpAddVariable("$hostname", a.DBHostname));
        php.Add(phpAddVariable("$password", a.DBPassword));
        php.Add(phpAddVariable("$username", a.DBUserName));
        php.Add(phpAddVariable("$port", a.DBPort));
        php.Add(phpAddVariable("$dbname", a.DBName));

        string prefix = "";
        foreach (string s in php)
        {
            prefix += s;
        }

        Prepend(prefix, templatePath, writePath);


    }

    private string phpPost(string s1, string s2)
    {
        return s1 + " = $_POST['" + s2 + "'];\n";
    }

    private string phpAddVariable(string identifier, string value)
    {
        return identifier + " = '" + value + "';\n";
    }

    public void GeneratePHP()
    {

        /*
         * There are 7 files to build:
         * GetGamesForUser
         * GetTraceIDs
         * GetUserFromEmail
         * PushSessionParameters
         * PushTraceInformation
         * SetNewGame
         * SetSessionID
         */


        // Create a directory to put all the PHP files into

        Directory.CreateDirectory("PHP");

        // Grab a list of files that you want to generate - the original templates for these files are held in .txt documents in the Resources folder

        List<string> phpFiles = new List<string>() { "GetGamesForUser", "GetTraceIDs", "GetUserFromEmail", "PushSessionParameters", "PushTraceInformation", "SetNewGame", "SetSessionID","PushCriticalEvent" };

        // Prepend user-specified login information to each template and output the result as a new php file

        foreach (string s in phpFiles)
        {
            PrependLogin(s, "PHP/" + s + ".php");
        }

    }


    #endregion

    #region Communicating with Server

    private void NewGame()
    {

        /*
         * If a new game is created, post that game's name and ID to the server.
         */

        Analytics analytics = (Analytics)target;
        string setNewGameURL = analytics.BaseDomainURL + "SetNewGame.php";


        WWWForm form = new WWWForm();
        form.AddField("name", formatString(analytics.NewGameName));
        form.AddField("user", 0+"");

        WWW www = new WWW(setNewGameURL, form);

        while (!www.isDone) { }
        Undo.RecordObject(analytics, "Updated list of games");

        analytics.GameNameID.Add(analytics.NewGameName, int.Parse(www.text));

        List<string> l = new List<string>();
        l.AddRange(analytics.GameNames);
        l.Insert(l.Count - 1, analytics.NewGameName);
        analytics.GameNames = l.ToArray();

        analytics.NewGameName = "";

        EditorUtility.SetDirty(analytics);


    }


    private string[] GetGames()
    {

        /*
         * Grab the list of potential games that data can be logged for.
         */

        Analytics analytics = (Analytics)target;


        if (analytics.GameNames.Length > 0)
        {
            return analytics.GameNames;
        }
        else
        {

            //WWW Goes here
            string getGamesForUserURL = analytics.BaseDomainURL + "GetGamesForUser.php";
            string txt;

            WWWForm form = new WWWForm();

                        WWW www = new WWW(getGamesForUserURL);

            while (!www.isDone) { }

            analytics.GameNameID = new Dictionary<string, int>();


            string wwwtext = Regex.Replace(www.text, @"\r\n?|\n", "");


            string[] parse = wwwtext.Split("|".ToCharArray());
            int count = 0;

            foreach (string s in parse)
            {
                s.Split();
                string[] s2 = s.Split("Â¬".ToCharArray());
                int ii;
                bool b = int.TryParse(s2[0], out ii);

                if (b) { count++; }

            }



            if (count > 0)
            {

                foreach (string s in parse)
                {

                    string[] s2 = s.Split("Â¬".ToCharArray());


                    analytics.GameNameID.Add(s2[2], int.Parse(s2[0]));
                }
                txt = wwwtext + "|New Game";




                string[] result = txt.Split("|".ToCharArray());

                for (int i = 0; i < result.Length - 1; i++)
                {
                    result[i] = result[i].Split("Â¬".ToCharArray())[2];

                }

                analytics.GameNames = result;

                EditorUtility.SetDirty(analytics);

                return result;



            }
            else
            {
                analytics.GameNames = new string[] { "New Game" };
                EditorUtility.SetDirty(analytics);

                return new string[] { "New Game" };
            }
        }

    }

    #endregion

}
